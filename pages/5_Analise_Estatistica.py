
import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from scipy import stats
from scipy.stats import t, norm, chi2_contingency
import warnings
warnings.filterwarnings("ignore")
from sidebar import sidebar_menu


# Oculta o menu padr√£o do Streamlit multipage
st.set_page_config(page_title="Meu Portf√≥lio", layout="wide", initial_sidebar_state="expanded")

hide_streamlit_style = """
    <style>
    /* Esconde o menu padr√£o das multipages */
    .css-1d391kg, .css-h5rgaw, [data-testid="stSidebarNav"] {
        display: none;
    }
    </style>
"""
st.markdown(hide_streamlit_style, unsafe_allow_html=True)

menu_choice = sidebar_menu()

# Fun√ß√£o para carregar os dados 
@st.cache_data
def load_data():
    df = pd.read_csv(r"C:\Users\Predator\Downloads\dashboard\project_full\data\airlines_flights_data.csv")
    return df

df = load_data()

def statistical_analysis_page(df):
    """
    Aba dedicada √† an√°lise estat√≠stica com intervalos de confian√ßa e testes de hip√≥tese
    """
    st.header("üìä An√°lise Estat√≠stica Avan√ßada")
    st.markdown("---")
    
    # Criar sub-abas
    subtab1, subtab2, subtab3, subtab4 = st.tabs([
        "üéØ Par√¢metro Escolhido",
        "üìè Intervalos de Confian√ßa", 
        "üß™ Testes de Hip√≥tese",
        "üìã Resumo e Conclus√µes"
    ])
    
    with subtab1:
        st.subheader("1. Par√¢metro Escolhido para An√°lise: PRE√áO DOS VOOS")
        
        col1, col2 = st.columns([2, 1])
        
        with col1:
            st.markdown("""
            ### üéØ Justificativa da Escolha
            
            O **pre√ßo dos voos** foi escolhido como par√¢metro principal de an√°lise por ser:
            
            1. **Vari√°vel de interesse comercial:** O pre√ßo √© o fator mais importante na decis√£o de compra
            2. **Vari√°vel cont√≠nua:** Permite aplica√ß√£o de diversos testes estat√≠sticos
            3. **Distribui√ß√£o interessante:** Apresenta assimetria e variabilidade significativa
            4. **Relev√¢ncia pr√°tica:** Insights sobre pre√ßos t√™m aplica√ß√£o direta no mercado
            
            ### üéØ Objetivos da An√°lise
            
            - Estimar o pre√ßo m√©dio dos voos com intervalo de confian√ßa
            - Testar se existe diferen√ßa significativa de pre√ßos entre companhias a√©reas
            - Verificar se voos diretos s√£o significativamente mais caros que voos com paradas
            - Analisar se a classe do voo impacta significativamente no pre√ßo
            """)
        
        with col2:
            # Estat√≠sticas b√°sicas do pre√ßo
            st.metric("Pre√ßo M√©dio", f"R$ {df['price'].mean():.2f}")
            st.metric("Pre√ßo Mediano", f"R$ {df['price'].median():.2f}")
            st.metric("Desvio Padr√£o", f"R$ {df['price'].std():.2f}")
            st.metric("Coef. Varia√ß√£o", f"{(df['price'].std()/df['price'].mean()*100):.1f}%")
        
        # Visualiza√ß√£o da distribui√ß√£o dos pre√ßos
        st.subheader("üìä Distribui√ß√£o dos Pre√ßos")
        
        col1, col2 = st.columns(2)
        
        with col1:
            # Histograma
            fig_hist = px.histogram(
                df, 
                x="price", 
                nbins=50,
                title="Distribui√ß√£o dos Pre√ßos dos Voos",
                labels={"price": "Pre√ßo (R$)", "count": "Frequ√™ncia"}
            )
            fig_hist.add_vline(x=df["price"].mean(), line_dash="dash", line_color="red", 
                              annotation_text=f"M√©dia: R$ {df['price'].mean():.0f}")
            fig_hist.add_vline(x=df['price'].median(), line_dash="dash", line_color="green", 
                              annotation_text=f"Mediana: R$ {df['price'].median():.0f}")
            st.plotly_chart(fig_hist, use_container_width=True)
        
        with col2:
            # Box plot
            fig_box = px.box(
                df, 
                y="price",
                title="Box Plot dos Pre√ßos",
                labels={"price": "Pre√ßo (R$)"}
            )
            st.plotly_chart(fig_box, use_container_width=True)
    
    with subtab2:
        st.subheader("2. Intervalos de Confian√ßa")
        
        # IC para a m√©dia geral dos pre√ßos
        st.markdown("### üìè Intervalo de Confian√ßa para a M√©dia Geral dos Pre√ßos")
        
        n = len(df)
        mean_price = df["price"].mean()
        std_price = df["price"].std()
        se_price = std_price / np.sqrt(n)
        
        # IC 95% para a m√©dia
        confidence_level = st.slider("N√≠vel de Confian√ßa (%)", 90, 99, 95) / 100
        alpha = 1 - confidence_level
        z_critical = norm.ppf(1 - alpha/2)
        
        margin_error = z_critical * se_price
        ci_lower = mean_price - margin_error
        ci_upper = mean_price + margin_error
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.write("**Par√¢metros da An√°lise:**")
            st.write(f"‚Ä¢ Tamanho da amostra (n): {n:,}")
            st.write(f"‚Ä¢ M√©dia amostral: R$ {mean_price:.2f}")
            st.write(f"‚Ä¢ Desvio padr√£o: R$ {std_price:.2f}")
            st.write(f"‚Ä¢ Erro padr√£o: R$ {se_price:.2f}")
            st.write(f"‚Ä¢ Valor cr√≠tico (Z): {z_critical:.3f}")
            st.write(f"‚Ä¢ Margem de erro: R$ {margin_error:.2f}")
        
        with col2:
            st.success(f"""
            **Intervalo de Confian√ßa {confidence_level*100:.0f}%:**
            
            [R$ {ci_lower:.2f}, R$ {ci_upper:.2f}]
            
            **Interpreta√ß√£o:**
            Com {confidence_level*100:.0f}% de confian√ßa, o pre√ßo m√©dio dos voos est√° entre R$ {ci_lower:.2f} e R$ {ci_upper:.2f}
            """)
        
        # Visualiza√ß√£o do IC
        fig_ic = go.Figure()
        
        # Distribui√ß√£o normal
        x = np.linspace(mean_price - 4*se_price, mean_price + 4*se_price, 1000)
        y = norm.pdf(x, mean_price, se_price)
        
        fig_ic.add_trace(go.Scatter(x=x, y=y, mode="lines", name="Distribui√ß√£o da M√©dia"))
        fig_ic.add_vline(x=ci_lower, line_dash="dash", line_color="red", annotation_text=f"IC Inferior: {ci_lower:.2f}")
        fig_ic.add_vline(x=ci_upper, line_dash="dash", line_color="red", annotation_text=f"IC Superior: {ci_upper:.2f}")
        fig_ic.add_vline(x=mean_price, line_color="blue", annotation_text=f"M√©dia: {mean_price:.2f}")
        
        fig_ic.update_layout(
            title=f"Intervalo de Confian√ßa {confidence_level*100:.0f}% para a M√©dia dos Pre√ßos",
            xaxis_title="Pre√ßo (R$)",
            yaxis_title="Densidade"
        )
        
        st.plotly_chart(fig_ic, use_container_width=True)
        
        # IC para propor√ß√£o de voos diretos
        st.markdown("### üìè Intervalo de Confian√ßa para Propor√ß√£o de Voos Diretos")
        
        direct_flights = df[df["stops"] == "zero"]
        p_direct = len(direct_flights) / len(df)
        
        se_prop = np.sqrt(p_direct * (1 - p_direct) / n)
        margin_error_prop = z_critical * se_prop
        ci_prop_lower = p_direct - margin_error_prop
        ci_prop_upper = p_direct + margin_error_prop
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.write("**Par√¢metros da An√°lise:**")
            st.write(f"‚Ä¢ Total de voos: {n:,}")
            st.write(f"‚Ä¢ Voos diretos: {len(direct_flights):,}")
            st.write(f"‚Ä¢ Propor√ß√£o amostral: {p_direct:.4f}")
            st.write(f"‚Ä¢ Erro padr√£o: {se_prop:.4f}")
            st.write(f"‚Ä¢ Margem de erro: {margin_error_prop:.4f}")
        
        with col2:
            st.info(f"""
            **Intervalo de Confian√ßa {confidence_level*100:.0f}%:**
            
            [{ci_prop_lower:.4f}, {ci_prop_upper:.4f}]
            
            ou [{ci_prop_lower*100:.2f}%, {ci_prop_upper*100:.2f}%]
            
            **Interpreta√ß√£o:**
            Com {confidence_level*100:.0f}% de confian√ßa, a propor√ß√£o de voos diretos est√° entre {ci_prop_lower*100:.2f}% e {ci_prop_upper*100:.2f}%
            """)
    
    with subtab3:
        st.subheader("3. Testes de Hip√≥tese")
        
        # Teste 1: ANOVA - Diferen√ßa entre companhias
        st.markdown("### üß™ Teste 1: ANOVA - Diferen√ßa de Pre√ßos entre Companhias A√©reas")
        
        with st.expander("Ver detalhes do teste", expanded=True):
            st.write("""
            **Hip√≥teses:**
            - H‚ÇÄ: Œº‚ÇÅ = Œº‚ÇÇ = Œº‚ÇÉ = Œº‚ÇÑ = Œº‚ÇÖ = Œº‚ÇÜ (todas as companhias t√™m pre√ßo m√©dio igual)
            - H‚ÇÅ: Pelo menos uma companhia tem pre√ßo m√©dio diferente
            - N√≠vel de signific√¢ncia: Œ± = 0.05
            """)
            
            # Realizar ANOVA
            airlines = df["airline"].unique()
            price_groups = [df[df["airline"] == airline]["price"] for airline in airlines]
            f_stat, p_value_anova = stats.f_oneway(*price_groups)
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.write("**Resultados do Teste:**")
                st.write(f"‚Ä¢ Estat√≠stica F: {f_stat:.3f}")
                st.write(f"‚Ä¢ Valor-p: {p_value_anova:.2e}")
                
                if p_value_anova < 0.05:
                    st.success("**Decis√£o:** Rejeitar H‚ÇÄ")
                    st.success("**Conclus√£o:** Existe diferen√ßa significativa entre os pre√ßos m√©dios das companhias a√©reas")
                else:
                    st.warning("**Decis√£o:** N√£o rejeitar H‚ÇÄ")
                    st.warning("**Conclus√£o:** N√£o h√° evid√™ncia de diferen√ßa significativa")
            
            with col2:
                # Estat√≠sticas por companhia
                airline_stats = df.groupby("airline")["price"].agg(["count", "mean", "std"]).round(2)
                st.write("**Estat√≠sticas por Companhia:**")
                st.dataframe(airline_stats)
        
        # Teste 2: Teste t - Voos diretos vs com paradas
        st.markdown("### üß™ Teste 2: Teste t - Voos Diretos vs Voos com Paradas")
        
        with st.expander("Ver detalhes do teste", expanded=True):
            st.write("""
            **Hip√≥teses:**
            - H‚ÇÄ: Œº_diretos = Œº_com_paradas (pre√ßos m√©dios s√£o iguais)
            - H‚ÇÅ: Œº_diretos ‚â† Œº_com_paradas (pre√ßos m√©dios s√£o diferentes)
            - N√≠vel de signific√¢ncia: Œ± = 0.05
            """)
            
            direct_prices = df[df["stops"] == "zero"]["price"]
            indirect_prices = df[df["stops"] != "zero"]["price"]
            
            # Teste de igualdade de vari√¢ncias
            levene_stat, levene_p = stats.levene(direct_prices, indirect_prices)
            equal_var = levene_p > 0.05
            
            # Teste t
            t_stat, p_value_t = stats.ttest_ind(direct_prices, indirect_prices, equal_var=equal_var)
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.write("**Resultados do Teste:**")
                st.write(f"‚Ä¢ Teste de Levene (vari√¢ncias): {levene_stat:.3f} (p = {levene_p:.3f})")
                st.write(f"‚Ä¢ Vari√¢ncias iguais: {'Sim' if equal_var else 'N√£o'}")
                st.write(f"‚Ä¢ Estat√≠stica t: {t_stat:.3f}")
                st.write(f"‚Ä¢ Valor-p: {p_value_t:.2e}")
                
                if p_value_t < 0.05:
                    st.success("**Decis√£o:** Rejeitar H‚ÇÄ")
                    st.success("**Conclus√£o:** Existe diferen√ßa significativa entre pre√ßos de voos diretos e com paradas")
                else:
                    st.warning("**Decis√£o:** N√£o rejeitar H‚ÇÄ")
                    st.warning("**Conclus√£o:** N√£o h√° evid√™ncia de diferen√ßa significativa")
            
            with col2:
                st.write("**Estat√≠sticas Descritivas:**")
                st.write(f"‚Ä¢ **Voos diretos:**")
                st.write(f"  - M√©dia: R$ {direct_prices.mean():.2f}")
                st.write(f"  - DP: R$ {direct_prices.std():.2f}")
                st.write(f"  - n: {len(direct_prices):,}")
                st.write(f"‚Ä¢ **Voos com paradas:**")
                st.write(f"  - M√©dia: R$ {indirect_prices.mean():.2f}")
                st.write(f"  - DP: R$ {indirect_prices.std():.2f}")
                st.write(f"  - n: {len(indirect_prices):,}")
        
        # Teste 3: Qui-quadrado - Classe vs Faixa de pre√ßo
        st.markdown("### üß™ Teste 3: Qui-quadrado - Associa√ß√£o entre Classe e Faixa de Pre√ßo")
        
        with st.expander("Ver detalhes do teste", expanded=True):
            # Criar faixas de pre√ßo
            df_temp = df.copy()
            df_temp["price_range"] = pd.cut(df_temp["price"], 
                                          bins=[0, 5000, 15000, 50000, float("inf")], 
                                          labels=["Baixo", "M√©dio", "Alto", "Premium"])
            
            contingency_table = pd.crosstab(df_temp["class"], df_temp["price_range"])
            
            st.write("""
            **Hip√≥teses:**
            - H‚ÇÄ: N√£o h√° associa√ß√£o entre classe do voo e faixa de pre√ßo
            - H‚ÇÅ: H√° associa√ß√£o entre classe do voo e faixa de pre√ßo
            - N√≠vel de signific√¢ncia: Œ± = 0.05
            """)
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.write("**Tabela de Conting√™ncia:**")
                st.dataframe(contingency_table)
            
            with col2:
                # Teste qui-quadrado
                chi2_stat, p_value_chi2, dof, expected = chi2_contingency(contingency_table)
                
                st.write("**Resultados do Teste:**")
                st.write(f"‚Ä¢ Estat√≠stica Qui-quadrado: {chi2_stat:.3f}")
                st.write(f"‚Ä¢ Graus de liberdade: {dof}")
                st.write(f"‚Ä¢ Valor-p: {p_value_chi2:.2e}")
                
                if p_value_chi2 < 0.05:
                    st.success("**Decis√£o:** Rejeitar H‚ÇÄ")
                    st.success("**Conclus√£o:** Existe associa√ß√£o significativa entre classe do voo e faixa de pre√ßo")
                else:
                    st.warning("**Decis√£o:** N√£o rejeitar H‚ÇÄ")
                    st.warning("**Conclus√£o:** N√£o h√° evid√™ncia de associa√ß√£o significativa")
        
        # Teste 4: Correla√ß√£o
        st.markdown("### üß™ Teste 4: Correla√ß√£o - Dura√ß√£o vs Pre√ßo")
        
        with st.expander("Ver detalhes do teste", expanded=True):
            correlation_coef = df["duration"].corr(df["price"])
            n_corr = len(df)
            
            st.write("""
            **Hip√≥teses:**
            - H‚ÇÄ: œÅ = 0 (n√£o h√° correla√ß√£o linear entre dura√ß√£o e pre√ßo)
            - H‚ÇÅ: œÅ ‚â† 0 (h√° correla√ß√£o linear entre dura√ß√£o e pre√ßo)
            - N√≠vel de signific√¢ncia: Œ± = 0.05
            """)
            
            # Teste de signific√¢ncia da correla√ß√£o
            t_corr = correlation_coef * np.sqrt((n_corr - 2) / (1 - correlation_coef**2))
            p_value_corr = 2 * (1 - stats.t.cdf(abs(t_corr), n_corr - 2))
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.write("**Resultados do Teste:**")
                st.write(f"‚Ä¢ Coeficiente de correla√ß√£o: {correlation_coef:.4f}")
                st.write(f"‚Ä¢ Estat√≠stica t: {t_corr:.3f}")
                st.write(f"‚Ä¢ Valor-p: {p_value_corr:.2e}")
                
                if p_value_corr < 0.05:
                    st.success("**Decis√£o:** Rejeitar H‚ÇÄ")
                    st.success("**Conclus√£o:** Existe correla√ß√£o linear significativa")
                    if correlation_coef > 0:
                        st.info("A correla√ß√£o √© **POSITIVA**: quanto maior a dura√ß√£o, maior tende a ser o pre√ßo")
                    else:
                        st.info("A correla√ß√£o √© **NEGATIVA**: quanto maior a dura√ß√£o, menor tende a ser o pre√ßo")
                else:
                    st.warning("**Decis√£o:** N√£o rejeitar H‚ÇÄ")
                    st.warning("**Conclus√£o:** N√£o h√° evid√™ncia de correla√ß√£o linear significativa")
            
            with col2:
                # Gr√°fico de dispers√£o
                fig_corr = px.scatter(
                    df.sample(1000), 
                    x="duration", 
                    y="price",
                    title=f"Correla√ß√£o: Dura√ß√£o vs Pre√ßo (r = {correlation_coef:.4f})",
                    labels={"duration": "Dura√ß√£o (horas)", "price": "Pre√ßo (R$)"}
                )
                st.plotly_chart(fig_corr, use_container_width=True)
    
    with subtab4:
        st.subheader("4. Resumo dos Resultados e Interpreta√ß√µes")
        
        # Recalcular valores para o resumo
        n = len(df)
        mean_price = df["price"].mean()
        std_price = df["price"].std()
        se_price = std_price / np.sqrt(n)
        z_critical = norm.ppf(0.975)  # 95% IC
        margin_error = z_critical * se_price
        ci_lower = mean_price - margin_error
        ci_upper = mean_price + margin_error
        
        direct_flights = df[df["stops"] == "zero"]
        p_direct = len(direct_flights) / len(df)
        se_prop = np.sqrt(p_direct * (1 - p_direct) / n)
        margin_error_prop = z_critical * se_prop
        ci_prop_lower = p_direct - margin_error_prop
        ci_prop_upper = p_direct + margin_error_prop
        
        # ANOVA
        airlines = df["airline"].unique()
        price_groups = [df[df["airline"] == airline]["price"] for airline in airlines]
        f_stat, p_value_anova = stats.f_oneway(*price_groups)
        
        # Teste t
        direct_prices = df[df["stops"] == "zero"]["price"]
        indirect_prices = df[df["stops"] != "zero"]["price"]
        levene_stat, levene_p = stats.levene(direct_prices, indirect_prices)
        equal_var = levene_p > 0.05
        t_stat, p_value_t = stats.ttest_ind(direct_prices, indirect_prices, equal_var=equal_var)
        
        # Qui-quadrado
        df_temp = df.copy()
        df_temp["price_range"] = pd.cut(df_temp["price"], 
                                      bins=[0, 5000, 15000, 50000, float("inf")], 
                                      labels=["Baixo", "M√©dio", "Alto", "Premium"])
        contingency_table = pd.crosstab(df_temp["class"], df_temp["price_range"])
        chi2_stat, p_value_chi2, dof, expected = chi2_contingency(contingency_table)
        
        # Correla√ß√£o
        correlation_coef = df["duration"].corr(df["price"])
        n_corr = len(df)
        t_corr = correlation_coef * np.sqrt((n_corr - 2) / (1 - correlation_coef**2))
        p_value_corr = 2 * (1 - stats.t.cdf(abs(t_corr), n_corr - 2))
        
        st.markdown("""
        A an√°lise estat√≠stica avan√ßada do pre√ßo dos voos revelou insights importantes:
        
        ### Intervalos de Confian√ßa
        - **Pre√ßo M√©dio Geral:** Com 95% de confian√ßa, o pre√ßo m√©dio dos voos est√° entre R$ {ci_lower:.2f} e R$ {ci_upper:.2f}.
        - **Propor√ß√£o de Voos Diretos:** A propor√ß√£o de voos diretos est√° entre {ci_prop_lower*100:.2f}% e {ci_prop_upper*100:.2f}%.
        
        ### Testes de Hip√≥tese
        - **ANOVA (Companhias A√©reas):** O valor-p ({p_value_anova:.2e}) foi menor que 0.05, indicando que **existe diferen√ßa significativa** nos pre√ßos m√©dios entre as companhias a√©reas. Isso sugere que a escolha da companhia a√©rea impacta o pre√ßo.
        - **Teste t (Voos Diretos vs. Paradas):** O valor-p ({p_value_t:.2e}) foi menor que 0.05, mostrando que **existe diferen√ßa significativa** entre os pre√ßos de voos diretos e voos com paradas. Geralmente, voos diretos tendem a ser mais caros, mas a an√°lise detalhada √© crucial.
        - **Qui-quadrado (Classe vs. Faixa de Pre√ßo):** O valor-p ({p_value_chi2:.2e}) foi menor que 0.05, confirmando que **existe associa√ß√£o significativa** entre a classe do voo e a faixa de pre√ßo. Classes superiores est√£o associadas a faixas de pre√ßo mais altas.
        - **Correla√ß√£o (Dura√ß√£o vs. Pre√ßo):** O coeficiente de correla√ß√£o foi de {correlation_coef:.4f} com um valor-p ({p_value_corr:.2e}) menor que 0.05. Isso indica uma **correla√ß√£o linear significativa** entre dura√ß√£o e pre√ßo. A correla√ß√£o √© {'positiva' if correlation_coef > 0 else 'negativa'}, sugerindo que quanto maior a dura√ß√£o, {'maior' if correlation_coef > 0 else 'menor'} tende a ser o pre√ßo.
        
        ### Conclus√µes Finais
        Os resultados estat√≠sticos fornecem uma base s√≥lida para entender os fatores que influenciam o pre√ßo dos voos. A variabilidade entre companhias, o impacto das paradas e da classe, e a correla√ß√£o com a dura√ß√£o s√£o aspectos cruciais para a tomada de decis√£o de viajantes e para a otimiza√ß√£o de estrat√©gias de precifica√ß√£o por parte das companhias a√©reas.
        """)

statistical_analysis_page(df)

if menu_choice == "Home":
    st.switch_page("Home.py")
elif menu_choice == "Certificados":
    st.switch_page("pages/2_Formacao_e_experiencia.py")
elif menu_choice == "Minhas Skills":
    st.switch_page("pages/3_Skills.py")
elif menu_choice == "An√°lise de Dados":
    st.switch_page("pages/4_Analise_de_dados.py")
